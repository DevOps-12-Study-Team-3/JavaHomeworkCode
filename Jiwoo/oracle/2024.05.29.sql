--1) 어제 만든 SCORE_STGR 테이블의 SNO 컬럼에 INDEX를 추가하세요.
CREATE INDEX SCORE_STGR_IDX
	ON SCORE_STGR(SNO);


--2) 어제 만든 ST_COURSEPF 테이블의 SNO, CNO, PNO 다중 컬럼에 INDEX를 추가하세요.
CREATE INDEX ST_COURSEPF_IDX
	ON ST_COURSEPF(SNO, CNO, PNO);

--뷰 이름은 자유
--1) 학생의 평점 4.5 만점으로 환산된 정보를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW ST_AVG4_5 AS
SELECT 
    SNO,
    SNAME,
    MAJOR,
    SYEAR,
    AVG(AVR * 1.125) AS AVR4_5
FROM 
    STUDENT
GROUP BY 
    SNO, SNAME, MAJOR, SYEAR;
--2) 각 과목별 기말고사 평균 점수를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW V_COURSE_AVGRES(
	COURSE_NUM,
	COURSE_NAME,
	AVG_RESULT
)AS(
	SELECT SC.CNO
		 , C.CNAME
		 , ROUND(AVG(SC.RESULT), 2) 
		FROM SCORE SC
		JOIN COURSE C
		  ON SC.CNO = C.CNO
		GROUP BY SC.CNO, C.CNAME 
);	 
   
   
   
   

--3) 각 사원과 관리자(MGR)의 이름을 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW EMP_ENAME_MGR AS
SELECT 
    E.ENO,
    E.ENAME,
    E.MGR,
    EM.ENAME AS MGR_ENAME
FROM EMP E
JOIN EMP EM 
  ON E.MGR = EM.ENO;



--4) 각 과목별 기말고사 평가 등급(A~F)까지와 해당 학생 정보를 검색할 수 있는 뷰를 생성하세요.

CREATE OR REPLACE VIEW COUR_AVR_SCO AS
SELECT 
    sub.COURSE_NUM,
    sub.COURSE_NAME,
    sub.MAJOR_NAME,
    sub.AVG_RESULT,
    SG.GRADE
FROM 
    (SELECT 
         SC.CNO AS COURSE_NUM,
         C.CNAME AS COURSE_NAME,
         ST.MAJOR AS MAJOR_NAME,
         ROUND(AVG(SC.RESULT), 2) AS AVG_RESULT
     FROM 
         SCORE SC
     JOIN 
         COURSE C ON SC.CNO = C.CNO
     JOIN 
         STUDENT ST ON ST.SNO = SC.SNO
     GROUP BY 
         SC.CNO, C.CNAME, ST.MAJOR) sub
JOIN 
    SCGRADE SG ON sub.AVG_RESULT BETWEEN SG.LOSCORE AND SG.HISCORE;
   

--5) 물리학과 교수의 과목을 수강하는 학생의 명단을 검색할 뷰를 생성하세요.
CREATE OR REPLACE VIEW PHY_STU AS
SELECT 
    ST.SNO,
    ST.SNAME,
    ST.MAJOR,
    ST.SYEAR,
    C.CNO,
    C.CNAME,
    P.PNO,
    P.SECTION
FROM 
    STUDENT ST
JOIN 
    SCORE SC ON ST.SNO = SC.SNO
JOIN 
    COURSE C ON SC.CNO = C.CNO
JOIN 
    PROFESSOR P ON C.PNO = P.PNO
WHERE 
    P.SECTION = '물리';
			
		


--1) 4.5 환산 평점이 가장 높은 3인의 학생을 검색하세요.
SELECT ROWNUM
	 , A.SNO
	 , A.SNAME
	 , A.AV4_5
	 FROM (
	 		SELECT SNO
	 			 , SNAME
	 			 , AVR*1.125 AS AV4_5
	 			 FROM STUDENT  
	 			 ORDER BY AV4_5 DESC 
	 	)A
	 	WHERE ROWNUM <= 3;
   


--2) 기말고사 과목별 평균이 높은 3과목을 검색하세요.
SELECT ROWNUM
	 , A.CNAME
	 , A.AV_RE
	 FROM (
	 		SELECT CO.CNAME
	 			 , AVG(SC.RESULT) AS AV_RE
	 			 FROM COURSE CO
	 			 JOIN SCORE SC 
	 			   ON CO.CNO = SC.CNO
	 			 GROUP BY CO.CNAME
	 			 ORDER BY AV_RE DESC
	 	)A
	WHERE ROWNUM <= 3;

--3) 학과별, 학년별, 기말고사 평균이 순위 3까지를 검색하세요.(학과, 학년, 평균점수 검색)
SELECT ROWNUM
	 , A.MAJOR
	 , A.SYEAR
	 , A.AV_RE
	 FROM (
	 		SELECT ST.MAJOR
	 			 , ST.SYEAR
	 			 , AVG(SC.RESULT) AS AV_RE
	 			 FROM STUDENT ST
	 			 JOIN SCORE SC 
	 			   ON ST.SNO = SC.SNO
	 			 GROUP BY ST.MAJOR, ST.SYEAR
	 			 ORDER BY AV_RE DESC
	 	)A
	WHERE ROWNUM <= 3;



--4) 기말고사 성적이 높은 과목을 담당하는 교수 3인을 검색하세요.(교수이름, 과목명, 평균점수 검색)
SELECT ROWNUM
	 , A.CNAME
	 , A.PNAME
	 , A.AV_RE
	 FROM (
	 		SELECT CO.CNAME
	 			 , P.PNAME
	 			 , AVG(SC.RESULT) AS AV_RE
	 			 FROM COURSE CO
	 			 JOIN SCORE SC 
	 			   ON CO.CNO = SC.CNO
	 			 JOIN PROFESSOR P
	 			   ON P.PNO = CO.PNO
	 			 GROUP BY CO.CNAME,P.PNAME
	 			 ORDER BY AV_RE DESC
	 	)A
	WHERE ROWNUM <= 3;



--5) 교수별로 현재 수강중인 학생의 수를 검색하세요.
SELECT 
    P.PNAME,
    P.PNO,
    COUNT(ST.SNO) AS STUDENT_COUNT
FROM 
    PROFESSOR P
JOIN 
    COURSE C ON P.PNO = C.PNO
JOIN 
    SCORE SC ON C.CNO = SC.CNO
JOIN 
    STUDENT ST ON SC.SNO = ST.SNO
GROUP BY 
    P.PNAME, P.PNO;


--1) CNO이 PK인 COURSE_PK 테이블을 생성하세요.(1번 방식으로)
CREATE TABLE COURSE_PK(
	CNO VARCHAR2(8) PRIMARY KEY,
	CNAME VARCHAR2(20),
	ST_NUM NUMBER(1,0),
	PNO VARCHAR2(8)
	);   
 


--2) PNO이 PK인 PROFESSOR_PK 테이블을 생성하세요.(2번 방식으로)
CREATE TABLE PROFESSOR_PK (
	PNO VARCHAR2(8) CONSTRAINT PROFESSOR_PNO_PK PRIMARY KEY,
	PNAME VARCHAR2(20),
	SECTION VARCHAR2(20),
	ORDERS VARCHAR2(10),
	HIREDATE DATE
);
--3) PF_TEMP 테이블에 PNO을 PK로 추가하세요.
ALTER TABLE PF_TEMP
	ADD CONSTRAINT PK_PF_TEMP_PNO PRIMARY KEY(PNO);

--4) COURSE_PROFESSOR 테이블에 CNO, PNO을 PK로 추가하세요.
ALTER TABLE COURSE_PROFESSOR_AVGES
	ADD CONSTRAINT PK_COURSE_PROFESSOR_AVGES_CNO_PNO PRIMARY KEY(COURSE_NO, PRO_NO);

--5) BOARD_NO(NUMBER)를 PK로 갖으면서 BOARD_TITLE(VARCHAR2(200)), BOARD_CONTENT(VARCHAR2(2000)), 
--   BOARD_WRITER(VARCHAR2(20)), BOARD_FRGT_DATE(DATE), BOARD_LMDF_DATE(DATE) 컬럼을 갖는 T_BOARD 테이블을 생성하세요.
CREATE TABLE T_BOARD(
	BOARD_NO NUMBER,
	BOARD_TITLE VARCHAR2(200),
	BOARD_CONTENT VARCHAR2(2000),
	BOARD_WRITER VARCHAR2(20),
	BOARD_FRGT_DATE DATE,
	BOARD_LMDF_DATE DATE,
	CONSTRAINT PK_T_BOARD_T_BOARD_NO PRIMARY KEY(BOARD_NO)
);

--6) BOARD_NO(NUMBER), BOARD_FILE_NO(NUMBER)를 PK로 갖으면서 BOARD_FILE_NM(VARCHAR2(200)), BOARD_FILE_PATH(VARCHAR2(2000)),
--   ORIGIN_FILE_NM(VARCHAR2(200)) 컬럼을 갖는 T_BOARD_FILE 테이블을 생성하세요.
CREATE TABLE T_BOARD_FILE(
	BOARD_NO NUMBER,
	BOARD_FILE_NO NUMBER,
	BOARD_FILE_NM VARCHAR2(200),
	BOARD_FILE_PATH VARCHAR2(2000),
	ORIGIN_FILE_NM VARCHAR2(200),
	CONSTRAINT PK_T_BOARD_FILE_T_BOARD_FILE_NO_FILE_NO PRIMARY KEY(BOARD_NO, BOARD_FILE_NO)
);
--7) 다음 구조를 갖는 테이블을 생성하세요.
--   T_SNS                              T_SNS_DETAIL                        T_SNS_UPLOADED
--   SNS_NO(PK)    SNS_NM               SNS_NO(PK, FK)   SNS_BEN            SNS_NO(PK, FK)    SNS_UPL_NO(PK)
--     1            페북                   1               4000                   1                  1
--     2           인스타                  2               10000                  1                  2
--     3           트위터                  3               30000                  2                  1
--      
CREATE TABLE T_SNS1(
    SNS_NO NUMBER,
    SNS_NM VARCHAR2(20),
    CONSTRAINT PK_SNS_NO PRIMARY KEY(SNS_NO)
);

CREATE TABLE T_SNS_DETAIL1(
    SNS_NO NUMBER,
    SNS_BEN NUMBER(6),
    CONSTRAINT PK_SNS_DET_NO PRIMARY KEY(SNS_NO),
    CONSTRAINT FK_SNS_DET_NO FOREIGN KEY(SNS_NO)
        REFERENCES T_SNS1(SNS_NO)
);

CREATE TABLE T_SNS_UPLOADED1(
    SNS_NO NUMBER,
    SNS_UP_NO NUMBER,
    CONSTRAINT PK_SNS_UP_NO PRIMARY KEY(SNS_NO, SNS_UP_NO),
    CONSTRAINT FK_SNS_UP_NO FOREIGN KEY(SNS_NO)
        REFERENCES T_SNS1(SNS_NO)
);

INSERT INTO T_SNS1
VALUES(1, '페북');

INSERT INTO T_SNS_DETAIL1
VALUES (1, 3000);

INSERT INTO T_SNS_UPLOADED1
VALUES(1, 4);

SELECT * FROM
    T_SNS1;

SELECT * FROM
    T_SNS_DETAIL1;
    
SELECT * FROM
    T_SNS_UPLOADED1;
